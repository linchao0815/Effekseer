#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Emitter
{
    uint FlagBits;
    uint Seed;
    uint ParticleHead;
    uint ParticleSize;
    uint TrailHead;
    uint TrailSize;
    uint TrailPhase;
    uint NextEmitCount;
    uint TotalEmitCount;
    uint EmitPointCount;
    float TimeCount;
    float TimeStopped;
    uint Reserved0;
    uint Reserved1;
    uint Reserved2;
    uint Color;
    mat4x3 Transform;
};

struct ParameterSet
{
    int EmitCount;
    int EmitPerFrame;
    float EmitOffset;
    uint Padding0;
    vec2 LifeTime;
    uint EmitShapeType;
    uint Padding1;
    vec4 EmitShapeData[2];
    vec3 Direction;
    float Spread;
    vec2 InitialSpeed;
    vec2 Damping;
    vec4 InitialAngleScale[2];
    vec4 TargetAngleScale[2];
    vec3 Gravity;
    uint Padding2;
    vec3 VortexCenter;
    float VortexRotation;
    vec3 VortexAxis;
    float VortexAttraction;
    float TurbulencePower;
    uint TurbulenceSeed;
    float TurbulenceScale;
    float TurbulenceOctave;
    uint RenderState;
    uint ShapeType;
    uint ShapeData;
    float ShapeSize;
    float Emissive;
    float FadeIn;
    float FadeOut;
    uint ColorFlags;
    uvec2 ColorStart;
    uvec2 ColorEnd;
    uint ColorTexIndex;
    uint NormalTexIndex;
    uint TexState;
    uint Padding3;
};

struct EmitPoint
{
    vec3 Position;
    vec3 Normal;
    vec3 Binormal;
    vec3 Tangent;
    vec2 UV;
    uint VColor;
};

struct Particle
{
    uint FlagBits;
    uint Seed;
    float LifeAge;
    uint InheritColor;
    uvec2 Velocity;
    uint Color;
    uint Padding;
    mat4x3 Transform;
};

struct Constants
{
    vec3 CameraPos;
    float DeltaTime;
    vec3 CameraFront;
    float Reserved;
    mat4 ProjMat;
    mat4 CameraMat;
    mat4x3 BillboardMat;
    mat4x3 YAxisBillboardMat;
};

layout(set = 0, binding = 2, std140) uniform cb2
{
    layout(row_major) Emitter emitter;
} _478;

layout(set = 0, binding = 1, std140) uniform cb1
{
    ParameterSet paramSet;
} _500;

layout(set = 2, binding = 1, std430) readonly buffer EmitPoints
{
    EmitPoint _data[];
} EmitPoints_1;

layout(set = 2, binding = 0, std430) buffer Particles
{
    layout(row_major) Particle _data[];
} Particles_1;

layout(set = 0, binding = 0, std140) uniform cb0
{
    layout(row_major) Constants constants;
} _819;

uint RandomUint(inout uint seed)
{
    uint state = seed;
    seed = (seed * 747796405u) + 2891336453u;
    uint word = ((state >> ((state >> 28u) + 4u)) ^ state) * 277803737u;
    return (word >> 22u) ^ word;
}

float RandomFloat(inout uint seed)
{
    uint param = seed;
    uint _290 = RandomUint(param);
    seed = param;
    return float(_290) / 4294967296.0;
}

vec3 RandomSpread(inout uint seed, inout vec3 baseDir, float angle)
{
    uint param = seed;
    float _404 = RandomFloat(param);
    seed = param;
    float theta = 6.28318023681640625 * _404;
    uint param_1 = seed;
    float _411 = RandomFloat(param_1);
    seed = param_1;
    float phi = angle * _411;
    vec3 randDir = vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    baseDir = normalize(baseDir);
    if (abs(baseDir.z) != 1.0)
    {
        vec3 front = vec3(0.0, 0.0, 1.0);
        vec3 right = normalize(cross(front, baseDir));
        vec3 up = cross(baseDir, right);
        return mat3(vec3(right), vec3(up), vec3(baseDir)) * randDir;
    }
    else
    {
        return randDir * sign(baseDir.z);
    }
}

float RandomFloatRange(inout uint seed, vec2 maxmin)
{
    uint param = seed;
    float _303 = RandomFloat(param);
    seed = param;
    return mix(maxmin.y, maxmin.x, _303);
}

vec3 RandomDirection(inout uint seed)
{
    uint param = seed;
    float _312 = RandomFloat(param);
    seed = param;
    float theta = 6.28318023681640625 * _312;
    uint param_1 = seed;
    float _318 = RandomFloat(param_1);
    seed = param_1;
    float phi = 6.28318023681640625 * _318;
    vec3 randDir = vec3(sin(phi) * cos(theta), sin(phi) * sin(theta), cos(phi));
    return randDir;
}

vec3 RandomCircle(inout uint seed, inout vec3 axis)
{
    uint param = seed;
    float _341 = RandomFloat(param);
    seed = param;
    float theta = 6.28318023681640625 * _341;
    vec3 randDir = vec3(cos(theta), 0.0, sin(theta));
    axis = normalize(axis);
    if (abs(axis.y) != 1.0)
    {
        vec3 up = vec3(0.0, 1.0, 0.0);
        vec3 right = normalize(cross(up, axis));
        vec3 front = cross(axis, right);
        return mat3(vec3(right), vec3(axis), vec3(front)) * randDir;
    }
    else
    {
        return randDir * sign(axis.y);
    }
}

mat4x3 TRSMatrix(vec3 translation, vec3 rotation, vec3 scale)
{
    vec3 s = sin(rotation);
    vec3 c = cos(rotation);
    mat4x3 m;
    m[0].x = scale.x * ((c.z * c.y) + ((s.z * s.x) * s.y));
    m[1].x = scale.y * (s.z * c.x);
    m[2].x = scale.z * ((c.z * (-s.y)) + ((s.z * s.x) * c.y));
    m[3].x = translation.x;
    m[0].y = scale.x * (((-s.z) * c.y) + ((c.z * s.x) * s.y));
    m[1].y = scale.y * (c.z * c.x);
    m[2].y = scale.z * (((-s.z) * (-s.y)) + ((c.z * s.x) * c.y));
    m[3].y = translation.y;
    m[0].z = scale.x * (c.x * s.y);
    m[1].z = scale.y * (-s.x);
    m[2].z = scale.z * (c.x * c.y);
    m[3].z = translation.z;
    return m;
}

uvec2 PackFloat4(vec4 v)
{
    uvec4 v16 = uvec4(packHalf2x16(vec2(v.x, 0.0)), packHalf2x16(vec2(v.y, 0.0)), packHalf2x16(vec2(v.z, 0.0)), packHalf2x16(vec2(v.w, 0.0)));
    return uvec2(v16.x | (v16.y << uint(16)), v16.z | (v16.w << uint(16)));
}

uvec2 PackFloat4(vec3 v3, float v1)
{
    vec4 param = vec4(v3, v1);
    return PackFloat4(param);
}

void _main(uvec3 dtid)
{
    uint seed = _478.emitter.Seed ^ (_478.emitter.TotalEmitCount + dtid.x);
    vec3 position = _478.emitter.Transform[3];
    uint param = seed;
    vec3 param_1 = _500.paramSet.Direction;
    float param_2 = (_500.paramSet.Spread * 3.1415920257568359375) / 180.0;
    vec3 _515 = RandomSpread(param, param_1, param_2);
    seed = param;
    vec3 direction = _515;
    uint param_3 = seed;
    vec2 param_4 = _500.paramSet.InitialSpeed;
    float _525 = RandomFloatRange(param_3, param_4);
    seed = param_3;
    float speed = _525;
    if (_500.paramSet.EmitShapeType == 1u)
    {
        vec3 lineStart = _478.emitter.Transform * vec4(_500.paramSet.EmitShapeData[0].xyz, 0.0);
        vec3 lineEnd = _478.emitter.Transform * vec4(_500.paramSet.EmitShapeData[1].xyz, 0.0);
        float lineWidth = _500.paramSet.EmitShapeData[1].w;
        uint param_5 = seed;
        float _565 = RandomFloat(param_5);
        seed = param_5;
        position += mix(lineStart, lineEnd, vec3(_565));
        uint param_6 = seed;
        vec3 _573 = RandomDirection(param_6);
        seed = param_6;
        position += ((_573 * lineWidth) * 0.5);
    }
    else
    {
        if (_500.paramSet.EmitShapeType == 2u)
        {
            vec3 circleAxis = _478.emitter.Transform * vec4(_500.paramSet.EmitShapeData[0].xyz, 0.0);
            float circleInner = _500.paramSet.EmitShapeData[1].x;
            float circleOuter = _500.paramSet.EmitShapeData[1].y;
            uint param_7 = seed;
            float _609 = RandomFloat(param_7);
            seed = param_7;
            float circleRadius = mix(circleInner, circleOuter, _609);
            uint param_8 = seed;
            vec3 param_9 = circleAxis;
            vec3 _616 = RandomCircle(param_8, param_9);
            seed = param_8;
            position += (_616 * circleRadius);
        }
        else
        {
            if (_500.paramSet.EmitShapeType == 3u)
            {
                float sphereRadius = _500.paramSet.EmitShapeData[0].x;
                uint param_10 = seed;
                vec3 _633 = RandomDirection(param_10);
                seed = param_10;
                position += (_633 * sphereRadius);
            }
            else
            {
                if (_500.paramSet.EmitShapeType == 4u)
                {
                    float modelSize = _500.paramSet.EmitShapeData[0].y;
                    if (_478.emitter.EmitPointCount > 0u)
                    {
                        uint param_11 = seed;
                        uint _656 = RandomUint(param_11);
                        seed = param_11;
                        uint emitIndex = _656 % _478.emitter.EmitPointCount;
                        EmitPoint emitPoint;
                        emitPoint.Position = EmitPoints_1._data[emitIndex].Position;
                        emitPoint.Normal = EmitPoints_1._data[emitIndex].Normal;
                        emitPoint.Binormal = EmitPoints_1._data[emitIndex].Binormal;
                        emitPoint.Tangent = EmitPoints_1._data[emitIndex].Tangent;
                        emitPoint.UV = EmitPoints_1._data[emitIndex].UV;
                        emitPoint.VColor = EmitPoints_1._data[emitIndex].VColor;
                        position += (_478.emitter.Transform * vec4(emitPoint.Position * modelSize, 0.0));
                        direction = mat3(vec3(normalize(emitPoint.Tangent)), vec3(normalize(emitPoint.Binormal)), vec3(normalize(emitPoint.Normal))) * direction;
                    }
                }
            }
        }
    }
    direction = _478.emitter.Transform * vec4(direction, 0.0);
    uint particleID = _478.emitter.ParticleHead + ((_478.emitter.TotalEmitCount + dtid.x) % _478.emitter.ParticleSize);
    Particle particle;
    particle.FlagBits = 1u;
    particle.Seed = seed;
    particle.LifeAge = 0.0;
    if (_500.paramSet.ColorFlags == 0u)
    {
        particle.InheritColor = 4294967295u;
    }
    else
    {
        particle.InheritColor = _478.emitter.Color;
    }
    particle.Color = 4294967295u;
    particle.Padding = 0u;
    vec3 param_12 = position;
    vec3 param_13 = vec3(0.0);
    vec3 param_14 = vec3(1.0);
    particle.Transform = TRSMatrix(param_12, param_13, param_14);
    vec3 param_15 = direction * speed;
    float param_16 = 0.0;
    particle.Velocity = PackFloat4(param_15, param_16);
    Particles_1._data[particleID].FlagBits = particle.FlagBits;
    Particles_1._data[particleID].Seed = particle.Seed;
    Particles_1._data[particleID].LifeAge = particle.LifeAge;
    Particles_1._data[particleID].InheritColor = particle.InheritColor;
    Particles_1._data[particleID].Velocity = particle.Velocity;
    Particles_1._data[particleID].Color = particle.Color;
    Particles_1._data[particleID].Padding = particle.Padding;
    Particles_1._data[particleID].Transform = particle.Transform;
}

void main()
{
    uvec3 dtid = gl_GlobalInvocationID;
    uvec3 param = dtid;
    _main(param);
}

